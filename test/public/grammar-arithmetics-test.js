// Generated by CoffeeScript 1.3.3
(function() {
  var CoffeeScript, PEG, PEGCoffee, expect, grammar, tryParse;

  if (typeof require !== "undefined" && require !== null) {
    CoffeeScript = require('coffee-script');
    expect = require('expect.js');
    PEG = require('pegjs');
    PEGCoffee = require('../lib/peg-coffee');
  } else {
    CoffeeScript = global.CoffeeScript;
    expect = global.expect;
    PEG = global.PEG;
    PEGCoffee = global.PEGCoffee;
  }

  tryParse = function(parser, text) {
    var result;
    try {
      result = parser.parse(text);
    } catch (e) {
      result = e;
    }
    return result;
  };

  grammar = 'start\n  = additive\n\nadditive\n  = left:multiplicative "+" right:additive { return left + right }\n  / multiplicative\n\nmultiplicative\n  = left:primary "*" right:multiplicative { return left * right }\n  / primary\n\nprimary\n  = integer\n  / "(" additive:additive ")" { return additive }\n\ninteger "integer"\n  = digits:[0-9]+ { return parseInt digits.join(""), 10 }';

  suite('arithmetic grammar', function() {
    setup(function() {
      return PEGCoffee.initialize(PEG);
    });
    return test('parses 2*(3+4)', function() {
      var parser;
      parser = PEG.buildParser(grammar);
      return expect(tryParse(parser, "2*(3+4)")).to.equal(14);
    });
  });

}).call(this);
